--Q1

DROP TABLE C_VENTES cascade constraints;

CREATE TABLE C_VENTES (
  IdD1 VARCHAR2(10) /*NOT NULL*/,
  IdD2 VARCHAR2(10) /*NOT NULL*/,
  IdD3 VARCHAR2(10) /*NOT NULL*/,
  Quantite NUMBER(10),
  Prix NUMBER(10,2),
  CONSTRAINT PK_C_VENTES PRIMARY KEY(IdD1, IdD2, IdD3)
)


--Q2
INSERT INTO C_VENTES (
  SELECT IdM, IdP, IdT, SUM(Quantite), SUM(Prix)
  FROM VENTE
  GROUP BY IdM, IdP, IdT
  UNION
  SELECT IdM, IdP, 'ALL', SUM(Quantite), SUM(Prix)
  FROM VENTE
  GROUP BY IdM, IdP
  UNION
  SELECT IdM, 'ALL', IdT, SUM(Quantite), SUM(Prix)
  FROM VENTE
  GROUP BY IdM, IdT
  UNION
  SELECT 'ALL', IdP, IdT, SUM(Quantite), SUM(Prix)
  FROM VENTE
  GROUP BY IdP, IdT
  UNION
  SELECT IdM, 'ALL', 'ALL', SUM(Quantite), SUM(Prix)
  FROM VENTE
  GROUP BY IdM
  UNION
  SELECT 'ALL', IdP, 'ALL', SUM(Quantite), SUM(Prix)
  FROM VENTE
  GROUP BY IdP
  UNION
  SELECT 'ALL', 'ALL', IdT, SUM(Quantite), SUM(Prix)
  FROM VENTE
  GROUP BY IdT
  UNION
  SELECT 'ALL', 'ALL' , 'ALL', SUM(Quantite), SUM(Prix)
  FROM VENTE
);


--Q3

--1
SELECT SUM(Quantite)
FROM C_VENTES
WHERE IdD1 = '100'
  AND IdD2 = 'ALL'
  AND IdD3 = 'ALL';

--2
SELECT SUM(Prix)
FROM C_VENTES, TEMPS
WHERE IdD3 = IdT
  AND IdD1 = 'ALL'
  AND IdD2 = 'ALL'
  AND DATEV = '10/10/10';

--3
SELECT SUM(Prix)
FROM C_VENTES
WHERE IdD1 ='ALL'
  AND IdD2 = 'ALL'
  AND IdD3 = 'ALL';

--4
SELECT IdD1, Nom, Quantite
FROM C_VENTES, MAGASIN
WHERE IdD1 = IdM
  AND IdD2 = '9987'
  AND IdD3 = 'ALL'
  AND Quantite = (
    SELECT MAX(Quantite)
    FROM C_VENTES
    WHERE IdD2 = '9987'
      AND IdD1 != 'ALL'
      AND IdD3 = 'ALL');


--Q4

SELECT COUNT(DISTINCT IdD1) * COUNT(DISTINCT IdD2)
FROM C_VENTES
WHERE IdD1 != 'ALL'
  AND IdD2 != 'ALL'
  AND IdD3 = 'ALL';


SELECT COUNT(*)
FROM C_VENTES
WHERE IdD1 != 'ALL'
  AND IdD2 != 'ALL'
  AND IdD3 = 'ALL';
  
  
--Q5

CREATE OR REPLACE PROCEDURE MAJ_C_VENTES(Derniere_MAJ DATE) IS
CURSOR Mini_Cube IS
WITH New_Vente AS (
  SELECT *
  FROM VENTE
  WHERE IdT IN (
    SELECT IdT
    FROM TEMPS
    WHERE DateV > Derniere_MAJ
    )
)
SELECT NVL(IdM,'ALL') IdD1, NVL(IdP,'ALL') IdD2, NVL(IdT,'ALL') IdD3, SUM(Quantite) Quantite, SUM(Prix) Prix
FROM New_Vente
GROUP BY CUBE(IdM, IdP, IdT);
Cpt INT := 0;
BEGIN
  FOR C IN Mini_Cube LOOP
    SELECT COUNT(*) INTO Cpt
    FROM C_VENTES CV
    WHERE CV.IdD1 = C.IdD1
      AND CV.IdD2 = C.IdD2
      AND CV.IdD3 = C.IdD3;
    IF Cpt = 0 THEN
      INSERT INTO C_VENTES VALUES(C.IdD1, C.IdD2, C.IdD3, C.Quantite, C.Prix);
    ELSE
      UPDATE C_VENTES
      SET C_VENTES.Quantite = C_VENTES.Quantite + C.Quantite, C_VENTES.Prix = C_VENTES.Prix + C.Prix
        WHERE C_VENTES.IdD1 = C.IdD1
          AND C_VENTES.IdD2 = C.IdD2
          AND C_VENTES.IdD3 = C.IdD3;
    END IF;
  END LOOP;
END;


--Q6

DROP TABLE D_LIEU cascade constraints;

CREATE TABLE D_LIEU (
  IdD1 VARCHAR2(10),
  IdL1 VARCHAR2(10),
  IdL2 VARCHAR2(10),
  IdL3 VARCHAR2(10),
  IdL4 VARCHAR2(10),
  IdL5 VARCHAR2(10),
  NomL VARCHAR2(30),
  CONSTRAINT PK_D_LIEU PRIMARY KEY(IdD1)
)


--Q7

CREATE OR REPLACE PROCEDURE REMPLIR_D_LIEU IS
CURSOR LIEUX IS
  SELECT IDL, NOM
  FROM LIEU;
CPT INT := 0;
CURSOR HIERARCHIE(IDLIEU LIEU.IDL%TYPE) IS
  SELECT IDL
  FROM LIEU
  CONNECT BY IDL = PRIOR IDLPERE
  START WITH IDL = IDLIEU
  ORDER BY LEVEL DESC;
REQUETE VARCHAR2(32767) := 'INSERT INTO D_LIEU VALUES(';

BEGIN
  FOR L IN LIEUX LOOP
    REQUETE := REQUETE || '''' || L.IDL || ''',';
    FOR H IN HIERARCHIE(L.IDL) LOOP
      REQUETE := REQUETE || '''' || H.IDL || ''',';
      CPT := CPT + 1;
    END LOOP;
    
    FOR I IN 1..5-CPT LOOP
      REQUETE := REQUETE ||'NULL,';
    END LOOP;
    REQUETE := REQUETE || '''' || L.NOM || ''')';
    --DBMS_OUTPUT.PUT_LINE(REQUETE);
    EXECUTE IMMEDIATE REQUETE;
    cpt := 0;
    REQUETE := 'INSERT INTO D_LIEU VALUES(';
  END LOOP;
END;


EXEC REMPLIR_D_LIEU;


SELECT * FROM D_LIEU;
  
--SET SERVEROUTPUT ON;


--Q8

INSERT INTO D_LIEU (
  SELECT IDM, D_LIEU.IDL1, D_LIEU.IDL2, D_LIEU.IDL3, D_LIEU.IDL4, IDM, MAGASIN.NOM
  FROM MAGASIN JOIN D_LIEU ON MAGASIN.IDL = D_LIEU.IDD1
);

INSERT INTO C_VENTES (
  SELECT IDL4, IDD2, IDD3, SUM(QUANTITE), SUM(PRIX)
  FROM C_VENTES JOIN D_LIEU ON C_VENTES.IDD1 = D_LIEU.IDD1
  GROUP BY IDL4, IDD2, IDD3
  UNION
  SELECT IDL3, IDD2, IDD3, SUM(QUANTITE), SUM(PRIX)
  FROM C_VENTES JOIN D_LIEU ON C_VENTES.IDD1 = D_LIEU.IDD1
  GROUP BY IDL3, IDD2, IDD3
  UNION
  SELECT IDL2, IDD2, IDD3, SUM(QUANTITE), SUM(PRIX)
  FROM C_VENTES JOIN D_LIEU ON C_VENTES.IDD1 = D_LIEU.IDD1
  GROUP BY IDL2, IDD2, IDD3
  UNION
  SELECT IDL1, IDD2, IDD3, SUM(QUANTITE), SUM(PRIX)
  FROM C_VENTES JOIN D_LIEU ON C_VENTES.IDD1 = D_LIEU.IDD1
  GROUP BY IDL1, IDD2, IDD3
);

SELECT * FROM C_VENTES;


--Q9

DROP TABLE D_TEMPS cascade constraints;

CREATE TABLE D_TEMPS (
  IDD3 VARCHAR2(10),
  IDT1 VARCHAR2(10),
  IDT2 VARCHAR2(10),
  IDT3 VARCHAR2(10),
  VAL VARCHAR2(10),
  CONSTRAINT PK_D_TEMPS PRIMARY KEY(IDD3)
)


CREATE OR REPLACE PROCEDURE REMPLIR_D_TEMPS IS
CURSOR TEMPS IS
  SELECT IDT, DATEV
  FROM TEMPS;
ANNEE D_TEMPS.IDT1%TYPE;
MOIS D_TEMPS.IDT2%TYPE;

BEGIN
  FOR T IN TEMPS 
  LOOP
    BEGIN
    SELECT IDD3 INTO ANNEE FROM D_TEMPS WHERE TO_CHAR(T.DATEV, 'YY') = D_TEMPS.VAL;
    EXCEPTION
          WHEN NO_DATA_FOUND THEN
            ANNEE := SEQ.NEXTVAL;
            INSERT INTO D_TEMPS VALUES (ANNEE, ANNEE, NULL, NULL,  TO_CHAR(T.DATEV, 'YY'));    
    END;
    BEGIN
    SELECT IDD3 INTO MOIS FROM D_TEMPS WHERE TO_CHAR(T.DATEV, 'MM/YY') = D_TEMPS.VAL;
    EXCEPTION
          WHEN NO_DATA_FOUND THEN
            MOIS := SEQ.NEXTVAL;
            INSERT INTO D_TEMPS VALUES (MOIS, ANNEE, MOIS, NULL,  TO_CHAR(T.DATEV, 'MM/YY'));
    END;
    INSERT INTO D_TEMPS VALUES (T.IDT, ANNEE, MOIS, T.IDT,  TO_CHAR(T.DATEV, 'DD/MM/YY'));
  END LOOP;
END;

CREATE SEQUENCE SEQ START WITH 1000 INCREMENT BY 1 NOCACHE NOCYCLE;

EXEC REMPLIR_D_TEMPS;








